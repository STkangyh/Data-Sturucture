Cpp 체인클래스 설계(1):
- ThreeLetterNode *first 변수 선언 
- first->data, first->link first를 이용해 데이터 멤버 참조
  - data와 link는 private로 선언되어 클래스 밖에서 접근 불가능

Cpp 체인클래스 설계(2):
- 리스트 조작 연산을 수행하는 함수로 데이터 멤버에 접근
  - getLink(), setLink(), getData(), setData()
  - 여전히 데이터에 불필요한 접근이 가능하므로 좋지 않음

Cpp 체인클래스 설계(3):
- 전체 체인에 대응하는 클래스 구현
- ThreeLetterNode와 ThreeLetterChain를 조합하여 사용
- ThreeLetterChain을 ThreeLetterNode 객체로 구성
  - ThreeLetterChain Has-A ThreeLetterNode
  - Has-A란 A가 개념적으로 B를 포함하거나 B가 A의 일부분이면 타입 A의 객체가 Has-A 타입 B의 객체라고 한다.

Cpp 체인클래스 설계(4):
- 클래스 ThreeLetterChain은 리스트의 첫번째 노드를 지시하는 접근 포인터, first만 포함하도록 정의
  - ThreeLetterChain에 포함될 ThreeLetterNode의 수를 미리 아는 것이 불가능
- ThreeLetterChain을 ThreeLetterNode의 friend로 선언
  - ThreeLetterChain과 ThreeLetterNode의 멤버 함수들만 ThreeLetterNode의 private 데이터 멤버에 접근 가능

Cpp 체인클래스 설계(5):
- 중첩 클래스 이용
  - 하나의 클래스가 다른 클래스 정의 안에서 정의
  - ThreeLetterNode 객체가 ThreeLetterChain의 외부로부터 접근될 수 없도록 보장
  - ThreeLetterNode의 데이터 멤버들은 public

Chain 조작 연산:
- 생성 함수
  - 가장 마지막 노드부터 생성
    - 가장 마지막 노드의 link는 null을 가리킨다.
  - 가장 첫번째 노드 데이터는 ThreeLetterChain의 first에 연결
- 삽입 함수
  - first의 값의 유무의 따라 위치 결정됨
  
