큐(Queue):
- 선입선출(FIFO) 리스트
  - 새로운 원소가 삽입되는 끝 - rear
  - 원소가 삭제되는 끝 - front

- 구현
  - 1차원 배열 이용(가장 심플한 케이스)
    - 삭제(pop)= queue front에 있는 앞 원소를 제거
      - 삭제할 때마다 나머지 원소들을 이동
      - 큐가 n개의 원소를 가질 때, 삭제 시 세타(n) 시간
    - 삽입(push) 배열 크기 조절 시간을 제외하면 세타(1) 시간
  
  - 큐의 첫번째 원소를 queue[front]로 표현한 큐
    - 변수 front를 사용하여 큐의 첫번째 위치를 항상 유지
    - 원소의 삭제를 세타(1) 시간에 수행
    - 큐의 원소=queue[front],....,queue[rear]
    - 배열의 크기가 고정되어 있을 때 문제 발생
  
  - 원형 큐(Circular queue)
    - 변수 front는 큐에서 첫 원소의 위치보다 시계방향으로 하나 앞 위치를 가리킴
      - 즉, 초기에는 가장 첫번째 원소 전에 공백이 존재함
      - 비어 있음을 확인하기 위함
      - 메모리 하나를 손해보면서 구조를 간단히 하기 위함
    - 변수 rear는 큐에서 마지막 원소의 위치를 가리킴
    - 메모리 크기를 바꿀 필요는 없다.
    - 최악의 경우에 삽입, 삭제 시간을 세타(1) 크기로 할 수 있음
  
  - 멤버함수 isEmpty(), front(), rear()
    - 큐의 공백 조건은 front==rear
    - 큐의 포화와 공백을 구분하기 위해 만원이 되기 전에 큐의 크기를 증가시킨다.
      - front==rear가 공백인지 포화인지 구분하기 위해 최대 원소 수를 capacity가 아닌 capacity-1로 한다
  - push의 구현
    - queue의 크기를 두 배로 확장하는 맞춤 코드가 필요함
      - 두 배 늘린 뒤 segment를 오른쪽으로 쭉 이동시키거나([n]으로)
      - [0]으로 segment를 이동시키면서 정렬하거나 
    1. 크기가 두 배 되는 새로운 배열 newQueue를 생성
    2. 두번째 부분(즉, queue[front+1]과 queue[capacity-1] 사이에 있는 원소들)을 newQueue의 0에서부터 복사해 넣는다
    3. 첫번째 부분(즉, queue[0]와 queue[rear] 사이에 있는 원소들)을 newQueue의 capacity-front-1에서부터 복사해 넣는다
  - pop의 구현
    - 연산시간 = O(1)
    - front = (front+1)%capacity로 front 인덱스를 이동시키고 queue[front].~T() 파괴자를 실행시켜 없앤다.
  - lastOP 변수 사용
    - 배열 queue의 공간 전부를 사용할 수 있도록 하는 방법
    - 큐에서 수행된 마지막 연산을 기록해 둔다
      - 삽입 수행 된 뒤 push로 설정
      - 삭제 수행 된 뒤 pop으로 설정
    - front == rear 일 때 lastOP의 값에 따라 큐가 공백인지 포화인지 판단
      - push면 포화, pop이면 공백
    - 큐의 삽입, 삭제 연산이 느려진다.