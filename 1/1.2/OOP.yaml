객체 지향 설계:

구조적 프로그래밍 설계 비교:
- 유사점
  - 분할-정복(devide-conqure)기법
- 차이점
  - 과제 분할 방법

알고리즘적 분해 비교:
- 알고리즘적 분해(함수적 분해)
  - 고전적, 소프트웨어를 기능적 모듈로 분해
  - 계산을 위함
  - Pascal의 프로시저, FORTRAN의 서브프로그램, C의 함수
- 객체 지향적 분해
  - 소프트웨어의 재사용성 조장
  - 직관적

OOP의 기본정의:
- 객체
  - 계산 수행, 상태를 갖는 개체
  - 데이터 + 절차적 요소
- OOP
  - 객체 = 기본적인 구성 단위
  - 각 객체는 어떤 타입(class)의 인스턴스
  - 클래스는 상속 관계로 연관됨
- 객체 지향 언어
  - 객체 지원, 모든 객체는 클래스에 속함, 상속 지원
- 객체 기반 언어
  - 객체 지원, 모든 객체는 클래스에 속함, 상속 지원 안함
  - Ada, Visual Basic, Fortran 90

프로그래밍 언어 발전:
- 고급 프로그래밍 언어
  - 1세대 FORTRAN
    - 수식 계산
  - 2세대 Pascal, C
    - 알고리즘 효과적 표현
  - 3세대 Modula
    - ADT 개념 도입
  - 4세대(OOPL) Smalltalk, Objective-C, C++
    - 상속 기능

C의 장점:
- 효율성: 하드웨어 직접 제어 가능
- 유연성: 대부분의 응용 분야 사용 가능
- 가용성: 모든 platform에 C 컴파일러 존재
