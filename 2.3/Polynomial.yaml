다항식:
- a(x)=3x^2+2x-4, b(x)=x^8-10x^5-3x^3+1
  - 계수(coefficient) 3,2,-4
  - 지수(exponent) 2,1,0
  - 변수 x는 중요하지 않음
  - 차수(degree) 8

다항식 표현:
- 첫번째 결정:
    - 서로 다른 지수들은 내림차순으로 정돈
    - Polynomial의 전용 데이타 멤버 선언
      {private:
      int degree; //degree ≤ MaxDegree
      float coef [MaxDegree + 1]; // 계수 배열 }
    - a가 Polynomial 클래스 객체
      a.degree = n
      a.coef[i] = a_(n-i) (0<=i<=n)
    - a.coef[i]는 x^(n-i)의 계수, 각 계수는 지수의 내림차순으로 저장
    - 대부분 다항식의 연산을 위한 알고리즘을 간단하게 구성
    - degree가 MaxDegree보다 많이 작을 때 메모리 낭비
- 두번째 결정:
    - Polynomial의 전용 데이타 멤버 선언
      private:
        int degree;
        float *coef;
    - 생성자를 Polynomial에 추가
      Polynomial::Polynomial(int d){
      degree=d;
      coef=new float[degree+1]; }
    - 동적 멤버 함수 사용
  단점: 희소(sparse) 다항식에서 기억 공간 낭비
    예시) 다항식 x^1000+1
- 세번째 결정(메모리 차원 권장): 
  - 모든 다항식은 배열 termArray(항 배열)를 이용해 표현
  - termArray의 각 원소는 term 타입
  - 항을 term으로 정의한다는 것이며, coef, exp를 term에 저장한다
  - Polynomial의 정적 클래스 데이터 멤버
      class Polynomial; //전방 선언
      class term{
      friend Polynomial;
      private:
        float coef; // 계수
        int exp; // 지수 
      class Polynomial{
      private:
        Term *termArray; // 0이 아닌 항의 배열
        int capacity; // termArray의 크기
        int terms; // 0이 아닌 항의 수};
  - 장점: 메모리 관리

다항식 덧셈:
- c=a+b를 구하는 Cpp 함수
- 함수 Add(Program 2.8)
  a(x)(*this)와 b(x)를 항별로 더하여 c(x)를 만드는 함수
  - Polynomial의 기정 생성자가 capacity와 terms를 각각 0과 1로 초기화, termArray를 1로 초기화하는 것을 가정
- 기본 루프는 지수를 비교한 결과에 따라 두 다항식의 항들을 하나로 합하는 과정으로 구성
- 두 지수가 어떤 관계를 가지는지 검사하여 적당한 동작 수행

Add의 분석:
- a와 b에서의 0이 아닌 항의 수로 분석, 각각 m과 n으로 표현
- line 3,4 O(1), the number of iterations of this loop is bounded by m+n-1 O(m+n-1)
- for loop O(m+n)
- 전체 실행 시간 = O(1)+O(m+n-1)+O(m+n) = O(2m+2n)=O(m+n)
- 배열을 두 배 늘리는 것은 Add의 전체 실행 시간에 대해 기껏해야 상수 승의 영향을 준다.
  즉, 배열 두 배 확장은 Add 전체 실행 시간의 아주 작은 부분이 된다는 것을 보여준다.